import { config, selectors } from './config.js';

class ContactForm {
  constructor() {
    this.form = document.querySelector(selectors.contactForm);
    this.submitButton = this.form.querySelector('button[type="submit"]');
    this.fields = {
      name: this.form.querySelector('#fullName'),
      email: this.form.querySelector('#email'),
      message: this.form.querySelector('#message')
    };
    
    this.init();
  }

  init() {
    this.form.addEventListener('submit', (e) => this.handleSubmit(e));
    Object.values(this.fields).forEach(field => {
      field.addEventListener('input', () => this.validateField(field));
    });
  }

  validateField(field) {
    const value = field.value.trim();
    let isValid = true;
    let errorMessage = '';

    switch(field.id) {
      case 'fullName':
        isValid = value.length >= 2;
        errorMessage = 'Name must be at least 2 characters';
        break;
      case 'email':
        isValid = /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(value);
        errorMessage = 'Please enter a valid email';
        break;
      case 'message':
        isValid = value.length >= 10;
        errorMessage = 'Message must be at least 10 characters';
        break;
    }

    this.showFieldError(field, isValid ? '' : errorMessage);
    return isValid;
  }

  showFieldError(field, message) {
    const errorElement = field.parentElement.querySelector('.error-message') 
      || this.createErrorElement(field);
    errorElement.textContent = message;
    field.classList.toggle('error', message !== '');
  }

  createErrorElement(field) {
    const error = document.createElement('div');
    error.className = 'error-message';
    field.parentElement.appendChild(error);
    return error;
  }

  validateForm() {
    return Object.values(this.fields)
      .every(field => this.validateField(field));
  }

  async handleSubmit(e) {
    e.preventDefault();
    
    if (!this.validateForm()) {
      return;
    }

    try {
      await this.sendForm();
      this.showSuccess();
      this.form.reset();
    } catch (error) {
      this.showError();
      console.error('Submission error:', error);
    }
  }

  async sendForm() {
    this.setLoading(true);
    
    const response = await fetch(this.form.action, {
      method: 'POST',
      body: new FormData(this.form),
      headers: {
        'Accept': 'application/json',
        'X-Requested-With': 'XMLHttpRequest'
      }
    });

    if (!response.ok) throw new Error('Network response was not ok');
    
    return response.json();
  }

  setLoading(isLoading) {
    this.submitButton.disabled = isLoading;
    this.submitButton.textContent = isLoading ? 'Sending...' : 'Send';
  }

  showSuccess() {
    alert('Message sent successfully!');
  }

  showError() {
    alert('Error sending message. Please try again.');
  }
}

export const initContact = () => new ContactForm();