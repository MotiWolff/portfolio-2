import { config, selectors } from './config.js';
import { encryptData, decryptData } from './utils.js';

class ThemeManager {
  constructor() {
    this.toggle = document.querySelector(selectors.themeToggle);
    this.icon = this.toggle.querySelector('i');
    this.currentTheme = this.getSavedTheme();
    
    this.init();
  }

  init() {
    this.applyTheme(this.currentTheme);
    this.toggle.addEventListener('click', () => this.toggleTheme());
  }

  getSavedTheme() {
    const saved = localStorage.getItem(config.storageKeys.theme);
    if (saved) {
      const decrypted = decryptData(saved);
      return decrypted?.theme || config.themes.dark;
    }
    return config.themes.dark;
  }

  applyTheme(theme) {
    document.documentElement.setAttribute('data-theme', theme);
    this.icon.className = theme === config.themes.dark ? 'fas fa-moon' : 'fas fa-sun';
    localStorage.setItem(
      config.storageKeys.theme, 
      encryptData({ theme })
    );
  }

  toggleTheme() {
    const newTheme = this.currentTheme === config.themes.dark 
      ? config.themes.light 
      : config.themes.dark;
    
    this.currentTheme = newTheme;
    this.applyTheme(newTheme);
  }
}

export const initTheme = () => new ThemeManager();